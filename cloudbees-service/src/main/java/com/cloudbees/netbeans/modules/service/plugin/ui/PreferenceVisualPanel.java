package com.cloudbees.netbeans.modules.service.plugin.ui;

import com.cloudbees.netbeans.modules.service.plugin.model.CloudbeesInstance;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.WizardDescriptor;

/**
 *
 * @author David BRASSELY
 */
public class PreferenceVisualPanel extends javax.swing.JPanel  implements DocumentListener {

    private PreferenceWizardPanel panel;
    /** Creates new form NewServerVisualPanel1 */
    public PreferenceVisualPanel(PreferenceWizardPanel panel) {
        this.panel = panel;
        initComponents();
        // Register listener on the textFields to make the automatic updates
        this.apiKeyTF.getDocument().addDocumentListener(this); 
        this.secretTF.getDocument().addDocumentListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootDirLBL = new javax.swing.JLabel();
        apiKeyTF = new javax.swing.JTextField();
        workDirLBL = new javax.swing.JLabel();
        secretTF = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(565, 377));

        org.openide.awt.Mnemonics.setLocalizedText(rootDirLBL, org.openide.util.NbBundle.getMessage(PreferenceVisualPanel.class, "PreferenceVisualPanel.rootDirLBL.text")); // NOI18N

        apiKeyTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apiKeyTFActionPerformed(evt);
            }
        });
        apiKeyTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                apiKeyTFKeyTyped(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(workDirLBL, org.openide.util.NbBundle.getMessage(PreferenceVisualPanel.class, "PreferenceVisualPanel.workDirLBL.text")); // NOI18N

        secretTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secretTFActionPerformed(evt);
            }
        });
        secretTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                secretTFKeyTyped(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(workDirLBL)
                        .add(18, 18, 18))
                    .add(layout.createSequentialGroup()
                        .add(rootDirLBL)
                        .add(10, 10, 10)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(apiKeyTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .add(secretTF))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(44, 44, 44)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rootDirLBL)
                    .add(apiKeyTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(workDirLBL)
                    .add(secretTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void apiKeyTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apiKeyTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apiKeyTFActionPerformed

    private void apiKeyTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apiKeyTFKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_apiKeyTFKeyTyped

    private void secretTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secretTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_secretTFActionPerformed

    private void secretTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_secretTFKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_secretTFKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField apiKeyTF;
    private javax.swing.JLabel rootDirLBL;
    private javax.swing.JTextField secretTF;
    private javax.swing.JLabel workDirLBL;
    // End of variables declaration//GEN-END:variables

    public void readSettings(WizardDescriptor wizDesc) {        
        String apiKey = (String)wizDesc.getProperty(CloudbeesInstance.PROP_APIKEY);
        String secret = (String)wizDesc.getProperty(CloudbeesInstance.PROP_SECRET);

        this.apiKeyTF.setText(apiKey);
        this.secretTF.setText(secret);
    }
    
    public void storeSettings(WizardDescriptor wizDesc) {
        wizDesc.putProperty(CloudbeesInstance.PROP_APIKEY, this.apiKeyTF.getText());
        wizDesc.putProperty(CloudbeesInstance.PROP_SECRET, this.secretTF.getText());
    }
    
    /**
     * null or empty return value is valid else invalid with error message
     * returned.
     * @return
     */
    public String isValidVisual() {
        
        String errMsg = null;
        String apiKey = this.apiKeyTF.getText().trim();
        String secret = this.secretTF.getText().trim();
        
        if (apiKey == null || apiKey.trim().length() == 0 ) {
            errMsg = "API Key not valid";
        }
        
        if (secret == null || secret.trim().length() == 0 ) {
            errMsg = "Secret not valid";
        }

        return errMsg;
    }
    
    @Override
    public void insertUpdate(DocumentEvent de) {
        updateTexts(de);
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
        updateTexts(de);
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        updateTexts(de);
    }
    
    private void updateTexts(DocumentEvent e) {
        panel.fireChangeEvent(); // Notify that the panel changed

    }
}
